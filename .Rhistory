jpeg(filename = "examples/Chords.jpg", width = 1800, height = 1800, quality = 300)
# Base plot
chordDiagram(
x = data_long,
grid.col = mycolor,
transparency = 0.25,
directional = 1,
direction.type = c("arrows", "diffHeight"),
diffHeight  = -0.04,
annotationTrack = "grid",
annotationTrackHeight = c(0.05, 0.1),
link.arr.type = "big.arrow",
link.sort = TRUE,
link.largest.ontop = TRUE)
# Add text and axis
circos.trackPlotRegion(
track.index = 1,
bg.border = NA,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
# Add names to the sector.
circos.text(
x = mean(xlim),
y = 3.2,
labels = sector.index,
facing = "bending",
cex = 3
)
# Add graduation on axis
circos.axis(
h = "top",
major.at = seq(from = 0, to = xlim[2], by = ifelse(test = xlim[2]>10, yes = 2, no = 1)),
minor.ticks = 1,
#major.tick.percentage = 0.5,
labels.cex = 3,
labels.niceFacing = FALSE)
}
)
dev.off()
# parameters
circos.clear()
circos.par(start.degree = 90,
gap.degree = 4, track.margin = c(-0.1, 0.1),
points.overflow.warning = FALSE)
par(mar = rep(0, 4))
viridis(12)
# color palette
mycolor <- viridis(11, alpha = 1, begin = 0, end = 1, option = "D")
mycolor <- mycolor[sample(1:11)]
jpeg(filename = "examples/Chords.jpg", width = 1800, height = 1800, quality = 300)
# Base plot
chordDiagram(
x = data_long,
grid.col = mycolor,
transparency = 0.25,
directional = 1,
direction.type = c("arrows", "diffHeight"),
diffHeight  = -0.04,
annotationTrack = "grid",
annotationTrackHeight = c(0.05, 0.1),
link.arr.type = "big.arrow",
link.sort = TRUE,
link.largest.ontop = TRUE)
# Add text and axis
circos.trackPlotRegion(
track.index = 1,
bg.border = NA,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
# Add names to the sector.
circos.text(
x = mean(xlim),
y = 3.2,
labels = sector.index,
facing = "bending",
cex = 3
)
# Add graduation on axis
circos.axis(
h = "top",
major.at = seq(from = 0, to = xlim[2], by = ifelse(test = xlim[2]>10, yes = 2, no = 1)),
minor.ticks = 1,
#major.tick.percentage = 0.5,
labels.cex = 3,
labels.niceFacing = FALSE)
}
)
dev.off()
# color palette
mycolor <- viridis(length(trans$activities), alpha = 1, begin = 0, end = 1, option = "D")
mycolor <- mycolor[sample(1:trans$activities)]
mycolor <- mycolor[sample(1:length(trans$activities))]
mycolor <- viridis(length(trans$activities), alpha = 1, begin = 0, end = 1, option = "D")
mycolor <- mycolor[sample(1:length(trans$activities))]
trans$activities
act[2]
## rename activity names that are too long
act <- trans$activities
act[2]
act[6] <- "Work"
act[7] <- "Shop"
act
act[2] <- "PC"
act
act[5] <- "AC"
act
mdat <- as.data.frame(trans$trate, row.names = act)
colnames(mdat) <- act
View(mdat)
# I need a long format
data_long <- mdat %>%
rownames_to_column %>%
gather(key = 'key', value = 'value', -rowname)
# parameters
circos.clear()
circos.par(start.degree = 90,
gap.degree = 4, track.margin = c(-0.1, 0.1),
points.overflow.warning = FALSE)
par(mar = rep(0, 4))
# color palette
mycolor <- viridis(length(trans$activities), alpha = 1, begin = 0, end = 1, option = "D")
mycolor <- mycolor[sample(1:length(trans$activities))]
jpeg(filename = "examples/Chords.jpg", width = 1800, height = 1800, quality = 300)
# Base plot
chordDiagram(
x = data_long,
grid.col = mycolor,
transparency = 0.20,
directional = 1,
direction.type = c("arrows", "diffHeight"),
diffHeight  = -0.04,
annotationTrack = "grid",
annotationTrackHeight = c(0.05, 0.1),
link.arr.type = "big.arrow",
link.sort = TRUE,
link.largest.ontop = TRUE)
# Add text and axis
circos.trackPlotRegion(
track.index = 1,
bg.border = NA,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
# Add names to the sector.
circos.text(
x = mean(xlim),
y = 3.2,
labels = sector.index,
facing = "bending",
cex = 3
)
# Add graduation on axis
circos.axis(
h = "top",
major.at = seq(from = 0, to = xlim[2], by = ifelse(test = xlim[2]>10, yes = 2, no = 1)),
minor.ticks = 1,
#major.tick.percentage = 0.5,
labels.cex = 3,
labels.niceFacing = FALSE)
}
)
dev.off()
library(timeuse)
# load packages
library(hrbrthemes)
library(circlize)
#library(kableExtra)
#options(knitr.table.format = "html")
library(viridis)
#library(igraph)
#library(ggraph)
library(colormap)
# parameters
circos.clear()
circos.par(start.degree = 90,
gap.degree = 4, track.margin = c(-0.1, 0.1),
points.overflow.warning = FALSE)
par(mar = rep(0, 4))
# color palette
mycolor <- viridis(length(trans$activities), alpha = 1, begin = 0, end = 1, option = "D")
mycolor <- mycolor[sample(1:length(trans$activities))]
jpeg(filename = "examples/Chords.jpg", width = 1800, height = 1800, quality = 300)
# Base plot
chordDiagram(
x = data_long,
grid.col = mycolor,
transparency = 0.20,
directional = 1,
direction.type = c("arrows", "diffHeight"),
diffHeight  = -0.04,
annotationTrack = "grid",
annotationTrackHeight = c(0.05, 0.1),
link.arr.type = "big.arrow",
link.sort = TRUE,
link.largest.ontop = TRUE)
# Add text and axis
circos.trackPlotRegion(
track.index = 1,
bg.border = NA,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
# Add names to the sector.
circos.text(
x = mean(xlim),
y = 3.2,
labels = sector.index,
facing = "bending",
cex = 3
)
# Add graduation on axis
circos.axis(
h = "top",
major.at = seq(from = 0, to = xlim[2], by = ifelse(test = xlim[2]>10, yes = 2, no = 1)),
minor.ticks = 1,
#major.tick.percentage = 0.5,
labels.cex = 3,
labels.niceFacing = FALSE)
}
)
dev.off()
#library(ipumsr)
library(timeuse)
# load packages
#library(hrbrthemes)
library(circlize)
#library(kableExtra)
#options(knitr.table.format = "html")
library(viridis)
#library(igraph)
#library(ggraph)
library(colormap)
## rename activity names that are too long
act <- trans$activities
act[2] <- "PC"
act[5] <- "AC"
act[6] <- "Work"
act[7] <- "Shop"
mdat <- as.data.frame(trans$trate, row.names = act)
colnames(mdat) <- act
# I need a long format
data_long <- mdat %>%
rownames_to_column %>%
gather(key = 'key', value = 'value', -rowname)
# parameters
circos.clear()
circos.par(start.degree = 90,
gap.degree = 4, track.margin = c(-0.1, 0.1),
points.overflow.warning = FALSE)
par(mar = rep(0, 4))
# color palette
mycolor <- viridis(length(trans$activities), alpha = 1, begin = 0, end = 1, option = "D")
mycolor <- mycolor[sample(1:length(trans$activities))]
jpeg(filename = "examples/Chords.jpg", width = 1800, height = 1800, quality = 300)
# Base plot
chordDiagram(
x = data_long,
grid.col = mycolor,
transparency = 0.20,
directional = 1,
direction.type = c("arrows", "diffHeight"),
diffHeight  = -0.04,
annotationTrack = "grid",
annotationTrackHeight = c(0.05, 0.1),
link.arr.type = "big.arrow",
link.sort = TRUE,
link.largest.ontop = TRUE)
# Add text and axis
circos.trackPlotRegion(
track.index = 1,
bg.border = NA,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
# Add names to the sector.
circos.text(
x = mean(xlim),
y = 3.2,
labels = sector.index,
facing = "bending",
cex = 3
)
# Add graduation on axis
circos.axis(
h = "top",
major.at = seq(from = 0, to = xlim[2], by = ifelse(test = xlim[2]>10, yes = 2, no = 1)),
minor.ticks = 1,
#major.tick.percentage = 0.5,
labels.cex = 3,
labels.niceFacing = FALSE)
}
)
dev.off()
help(circos.text)
# parameters
circos.clear()
circos.par(start.degree = 90,
gap.degree = 4, track.margin = c(-0.1, 0.1),
points.overflow.warning = FALSE)
par(mar = rep(0, 4))
# color palette
mycolor <- viridis(length(trans$activities), alpha = 1, begin = 0, end = 1, option = "D")
mycolor <- mycolor[sample(1:length(trans$activities))]
jpeg(filename = "examples/Chords.jpg", width = 1800, height = 1800, quality = 300)
# Base plot
chordDiagram(
x = data_long,
grid.col = mycolor,
transparency = 0.20,
directional = 1,
direction.type = c("arrows", "diffHeight"),
diffHeight  = -0.04,
annotationTrack = "grid",
annotationTrackHeight = c(0.05, 0.1),
link.arr.type = "big.arrow",
link.sort = TRUE,
link.largest.ontop = TRUE)
# Add text and axis
circos.trackPlotRegion(
track.index = 1,
bg.border = NA,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
# Add names to the sector.
circos.text(
x = mean(xlim),
y = 3.2,
labels = sector.index,
facing = "bending",
cex = 3
)
}
)
dev.off()
library(usmap)
library(ggplot2)
setwd("~/R scripts")
devtools::create("us_map")
devtools::create("usamap")
install.packages("usmap")
states_df <- usmap::us_map()
counties_df <- usmap::us_map(regions = "counties")
View(states_df)
counties_df <- usmap::us_map(regions = "counties")
View(counties_df)
plot_usmap(data = statepop, values = "pop_2015", color = "red") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
library(usmap)
library(ggplot2)
plot_usmap(data = statepop, values = "pop_2015", color = "red") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
statepop
library(timeuse)
map_df <- tu_maps(data, "Sleep")
View(map_df)
as.matrix(map_df)
t(as.matrix(map_df))
states_df <- statepop
map_df_1 <- as.data.frame(t(as.matrix(map_df)))
View(map_df_1)
statepop
colnames(map_df_1) <- "abbr"
toupper(rownames(map_df_1))
rownames(map_df_1) <- toupper(rownames(map_df_1))
View(map_df_1)
colnames(map_df_1) <- "Sleep"
map_df_1$abbr <- toupper(rownames(map_df_1))
map_df_1 <- as.data.frame(t(as.matrix(map_df)))
colnames(map_df_1) <- "Sleep"
map_df_1$abbr <- toupper(rownames(map_df_1))
View(map_df_1)
df_map <- merge(map_df_1, statepop, by="abbr")
View(df_map)
plot_usmap(data = df_map, values = "Sleep", color = "white") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
help(plot_usmap)
plot_usmap(data = df_map, values = "Sleep", color = "white") +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma) +
theme(legend.position = "right")
plot_usmap(data = df_map, values = "Sleep", color = "white") +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma)  +
ggrepel::geom_label_repel(data = df_map,
aes(x = x, y = y, label = Sleep),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
theme(legend.position = "right")
plot_usmap(data = df_map, values = "Sleep", color = "white") +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma)  +
ggrepel::geom_label_repel(data = df_map,
aes(label = Sleep),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
theme(legend.position = "right")
plot_usmap(data = df_map, values = "Sleep", color = "white", labels = Sleep) +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma)  +
theme(legend.position = "right")
plot_usmap(data = df_map, values = "Sleep", color = "white", labels = df_map$Sleep) +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma)  +
theme(legend.position = "right")
plot_usmap(data = df_map, values = "Sleep", color = "white") +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma)  +
theme(legend.position = "right")
us_centroids <-
df_map %>%
group_by(full) %>%
summarise(centroid.x = mean(range(x)),
centroid.y = mean(range(y)),
share = Sleep)
us <- usmap::us_map()
View(us)
us_val <-
left_join(us, df_map, by = "full")
View(us_val)
us_centroids <-
df_map %>%
group_by(full) %>%
summarise(centroid.x = mean(range(x)),
centroid.y = mean(range(y)),
share = Sleep)
df_map <-
left_join(us, df_map, by = "full")
us_centroids <-
df_map %>%
group_by(full) %>%
summarise(centroid.x = mean(range(x)),
centroid.y = mean(range(y)),
share = Sleep)
View(us_centroids)
plot_usmap(data = df_map, values = "Sleep", color = "white") +
geom_text(data = us_centroids,
aes(centroid.x, centroid.y, label = share),
size = 5/14*8) +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma)  +
theme(legend.position = "right")
View(df_map)
map_df_1 <- as.data.frame(t(as.matrix(map_df)))
colnames(map_df_1) <- "Sleep"
map_df_1$abbr <- toupper(rownames(map_df_1))
df_map <- merge(map_df_1, statepop, by="abbr")
us <- usmap::us_map()
df_map <-
left_join(us, df_map, by = c("full", "fips", "abbr"))
us_centroids <-
df_map %>%
group_by(full) %>%
summarise(centroid.x = mean(range(x)),
centroid.y = mean(range(y)),
share = Sleep)
plot_usmap(data = df_map, values = "Sleep", color = "white") +
geom_text(data = us_centroids,
aes(centroid.x, centroid.y, label = share),
size = 5/14*8) +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma)  +
theme(legend.position = "right")
us_centroids <-
df_map %>%
summarise(centroid.x = mean(range(x)),
centroid.y = mean(range(y)),
share = Sleep)
View(us_centroids)
plot_usmap(data = df_map, values = "Sleep", color = "white") +
geom_text(data = us_centroids,
aes(centroid.x, centroid.y, label = share),
size = 5/14*8) +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma)  +
theme(legend.position = "right")
plot_usmap(data = df_map, values = "Sleep", color = "white") +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma)  +
theme(legend.position = "right")
df_map$Sleep
map_df_1 <- as.data.frame(t(as.matrix(map_df)))
colnames(map_df_1) <- "Sleep"
map_df_1$abbr <- toupper(rownames(map_df_1))
df_map <- merge(map_df_1, statepop, by="abbr")
us <- usmap::us_map()
mdf <-
left_join(us, df_map, by = c("full", "fips", "abbr"))
us_centroids <-
mdf %>%
summarise(centroid.x = mean(range(x)),
centroid.y = mean(range(y)),
share = unique(Sleep))
View(us_centroids)
plot_usmap(data = df_map, values = "Sleep", color = "white") +
geom_text(data = us_centroids,
aes(centroid.x, centroid.y, label = share),
size = 5/14*8) +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma)  +
theme(legend.position = "right")
us_centroids <-
mdf %>%
group_by(full) %>%
summarise(centroid.x = mean(range(x)),
centroid.y = mean(range(y)),
share = unique(Sleep))
View(us_centroids)
plot_usmap(data = df_map, values = "Sleep", color = "white") +
geom_text(data = us_centroids,
aes(centroid.x, centroid.y, label = share),
size = 5/14*8) +
scale_fill_continuous(name = "Mean(Sleep Time)", label = scales::comma)  +
theme(legend.position = "right")
